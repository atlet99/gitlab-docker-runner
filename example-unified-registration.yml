---
# Example playbook with unified GitLab Runner registration logic
# Demonstrates both modern (token) and legacy (registration_token) approaches

- name: Deploy GitLab Runner with unified logic
  hosts: all
  become: true
  vars:
    # Basic settings
    gitlab_runner_url: "https://gitlab.com/"
    gitlab_runner_name: "unified-runner"
    gitlab_runner_version: "latest"
    runner_directory: "/var/lib/gitlab-runner"
    gitlab_runner_container_name: "gitlab-runner-unified"
    
    # Docker settings
    docker_image: "alpine:latest"
    docker_privileged: false
    docker_volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/cache:/cache"
    
    # Network settings
    docker_use_host_network: false
    docker_network: "gitlab-runner-network"
    docker_network_subnet: "192.168.100.0/24"
    docker_network_gateway: "192.168.100.1"
    
    # Cache settings
    cache_type: "s3"
    cache_shared: true
    cache_s3_server_address: "s3.amazonaws.com"
    cache_s3_bucket_name: "gitlab-runner-cache"
    cache_s3_insecure: false

  tasks:
    # Example 1: Modern approach (token already exists)
    - name: Example modern registration with token
      include_role:
        name: gitlab-docker-runner
      vars:
        # Use modern approach - token already exists
        gitlab_runner_token: "{{ lookup('env', 'GITLAB_RUNNER_TOKEN') | default('') }}"
        gitlab_runner_tags: ["modern", "docker", "unified"]
        gitlab_runner_concurrent: 2
      when: lookup('env', 'GITLAB_RUNNER_TOKEN') is defined

    # Example 2: Legacy approach (registration_token)
    - name: Example legacy registration with registration_token
      include_role:
        name: gitlab-docker-runner
      vars:
        # Use legacy approach - registration_token
        gitlab_runner_registration_token: "{{ lookup('env', 'GITLAB_RUNNER_REGISTRATION_TOKEN') | default('') }}"
        gitlab_runner_tags: ["legacy", "docker", "unified"]
        gitlab_runner_concurrent: 2
        gitlab_runner_run_untagged: true
        gitlab_runner_locked: false
        gitlab_runner_access_level: "not_protected"
      when: lookup('env', 'GITLAB_RUNNER_REGISTRATION_TOKEN') is defined

    # Example 3: Advanced configuration with S3 cache
    - name: Example with advanced configuration
      include_role:
        name: gitlab-docker-runner
      vars:
        gitlab_runner_token: "{{ lookup('env', 'GITLAB_RUNNER_TOKEN') | default('') }}"
        gitlab_runner_name: "advanced-runner"
        gitlab_runner_container_name: "gitlab-runner-advanced"
        gitlab_runner_tags: ["advanced", "s3-cache", "unified"]
        gitlab_runner_concurrent: 4
        
        # Advanced Docker settings
        docker_privileged: true
        docker_shm_size: 134217728  # 128 MB
        docker_pull_policy: "always"
        docker_allowed_pull_policies: ["if-not-present", "always"]
        
        # S3 cache configuration
        cache_type: "s3"
        cache_shared: true
        cache_s3_server_address: "{{ lookup('env', 'S3_ENDPOINT') | default('s3.amazonaws.com') }}"
        cache_s3_access_key: "{{ lookup('env', 'S3_ACCESS_KEY') | default('') }}"
        cache_s3_secret_key: "{{ lookup('env', 'S3_SECRET_KEY') | default('') }}"
        cache_s3_bucket_name: "{{ lookup('env', 'S3_BUCKET') | default('gitlab-runner-cache') }}"
        cache_s3_insecure: false
        
        # Network settings
        docker_use_host_network: false
        docker_network: "gitlab-runner-advanced-network"
        docker_network_subnet: "192.168.200.0/24"
        docker_network_gateway: "192.168.200.1"
        
        # Logging
        gitlab_runner_log_level: "info"
        gitlab_runner_log_format: "json"
        
        # Timeouts
        gitlab_runner_check_interval: 5
        gitlab_runner_shutdown_timeout: 60
        
        # Feature flags
        runner_feature_flags:
          FF_NETWORK_PER_BUILD: "true"
          FF_USE_LEGACY_KUBERNETES_EXECUTION: "false"
      when: lookup('env', 'GITLAB_RUNNER_TOKEN') is defined

  post_tasks:
    - name: Check status of all runners
      shell: docker ps --filter "name=gitlab-runner" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
      register: runner_containers
      failed_when: false

    - name: Display container status
      debug:
        var: runner_containers.stdout_lines

    - name: Check runner configuration
      shell: docker exec {{ item }} gitlab-runner list 2>/dev/null || echo "Runner not ready"
      loop: "{{ runner_containers.stdout_lines | select('match', '^gitlab-runner') | list | map('regex_replace', '^([^\\s]+).*', '\\1') | list }}"
      register: runner_status
      failed_when: false

    - name: Display runner status
      debug:
        var: runner_status.results 