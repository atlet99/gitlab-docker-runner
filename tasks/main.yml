---
- name: Check Docker installation
  command: docker --version
  register: docker_check
  failed_when: docker_check.rc != 0
  changed_when: false

- name: Create runner data directory
  file:
    path: "{{ runner_directory }}"
    state: directory
    owner: root
    group: root
    mode: '0750'

- name: Inspect custom network (if needed)
  command: docker network inspect {{ docker_network }}
  register: network_check
  failed_when: network_check.rc not in [0, 1]
  changed_when: false
  when:
    - not runner_network_per_build
    - docker_network is defined

- name: Create custom network (if needed)
  command: >
    docker network create --driver bridge {% if docker_network_subnet is defined %} --subnet={{ docker_network_subnet }} {% endif %} {% if docker_network_gateway is defined %} --gateway={{ docker_network_gateway }} {% endif %} {% if docker_network_options is defined %} {% for key, value in docker_network_options.items() %} --opt {{ key }}={{ value }} {% endfor %} {% endif %} {{ docker_network }}
  when:
    - not runner_network_per_build
    - docker_network is defined
    - network_check.rc == 1

- name: Validate GitLab URL for legacy registration
  uri:
    url: "{{ gitlab_runner_url }}"
    method: GET
    status_code: [200, 401, 403]
    timeout: 30
  register: gitlab_url_check
  when: gitlab_runner_registration_method == "legacy"
  failed_when: false

- name: Fail if GitLab URL is not accessible
  fail:
    msg: "GitLab URL {{ gitlab_runner_url }} is not accessible. Please check the URL and network connectivity."
  when:
    - gitlab_runner_registration_method == "legacy"
    - gitlab_url_check.failed

- name: Generate config.toml for modern registration method
  ansible.builtin.template:
    src: config.toml.j2
    dest: "{{ runner_directory }}/config.toml"
    mode: '0600'
  when: gitlab_runner_registration_method == "modern"

- name: Generate minimal config.toml for legacy registration method
  ansible.builtin.template:
    src: config.toml.j2
    dest: "{{ runner_directory }}/config.toml"
    mode: '0600'
  when: gitlab_runner_registration_method == "legacy"

- name: Start GitLab Runner container for modern registration
  docker_container:
    name: "{{ gitlab_runner_container_name }}"
    image: "gitlab/gitlab-runner:{{ gitlab_runner_version }}"
    state: started
    restart_policy: always
    recreate: true
    # Pass a list of dictionaries to `networks`.
    # If `runner_network_per_build` is true, pass an empty list => no networks.
    # Otherwise, pass a list with one dict containing the network name (or "bridge" by default).
    networks: "{{ [] if runner_network_per_build else [{ 'name': docker_network|default('bridge') }] }}"
    volumes:
      - "{{ runner_directory }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env:
      TZ: "{{ tz }}"
  when: gitlab_runner_registration_method == "modern"

- name: Start GitLab Runner container for legacy registration (temporary)
  docker_container:
    name: "{{ gitlab_runner_container_name }}"
    image: "gitlab/gitlab-runner:{{ gitlab_runner_version }}"
    state: started
    restart_policy: "no"
    recreate: true
    # Pass a list of dictionaries to `networks`.
    # If `runner_network_per_build` is true, pass an empty list => no networks.
    # Otherwise, pass a list with one dict containing the network name (or "bridge" by default).
    networks: "{{ [] if runner_network_per_build else [{ 'name': docker_network|default('bridge') }] }}"
    volumes:
      - "{{ runner_directory }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env:
      TZ: "{{ tz }}"
  when: gitlab_runner_registration_method == "legacy"

- name: Wait for GitLab Runner container to be ready
  wait_for:
    timeout: 30
  when: gitlab_runner_registration_method == "legacy"

- name: Register runner using legacy method
  command: >
    docker exec {{ gitlab_runner_container_name }} gitlab-runner register
    --non-interactive
    --url "{{ gitlab_runner_url }}"
    --registration-token "{{ gitlab_runner_registration_token }}"
    --name "{{ gitlab_runner_name }}"
    {% if gitlab_runner_tags %}--tag-list "{{ gitlab_runner_tags | join(',') }}"{% endif %}
    --executor docker
    --docker-image "{{ docker_image }}"
    {% if docker_privileged %}--docker-privileged{% endif %}
    {% if runner_network_per_build %}--docker-network-mode "{{ docker_network_mode }}"{% endif %}
    {% if docker_volumes %}--docker-volumes "{{ docker_volumes | join(' --docker-volumes ') }}"{% endif %}
    --docker-extra-hosts "{{ ansible_default_ipv4.address }}:{{ ansible_default_ipv4.address }}"
  when: 
    - gitlab_runner_registration_method == "legacy"
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
  register: legacy_registration_result
  failed_when: legacy_registration_result.rc != 0

- name: Wait for registration to complete
  wait_for:
    timeout: 30
  when: 
    - gitlab_runner_registration_method == "legacy"
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is changed

- name: Check registration logs for errors
  shell: docker logs {{ gitlab_runner_container_name }} 2>&1 | tail -20
  register: registration_logs
  when: 
    - gitlab_runner_registration_method == "legacy"
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is changed

- name: Display registration logs
  debug:
    var: registration_logs.stdout_lines
  when: 
    - gitlab_runner_registration_method == "legacy"
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is changed

- name: Stop temporary registration container
  docker_container:
    name: "{{ gitlab_runner_container_name }}"
    state: stopped
  when: 
    - gitlab_runner_registration_method == "legacy"
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is changed

- name: Start GitLab Runner container in normal mode (after registration)
  docker_container:
    name: "{{ gitlab_runner_container_name }}"
    image: "gitlab/gitlab-runner:{{ gitlab_runner_version }}"
    state: started
    restart_policy: always
    recreate: true
    networks: "{{ [] if runner_network_per_build else [{ 'name': docker_network|default('bridge') }] }}"
    volumes:
      - "{{ runner_directory }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env:
      TZ: "{{ tz }}"
  when: 
    - gitlab_runner_registration_method == "legacy"
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is changed

- name: Wait for GitLab Runner to be ready after registration
  wait_for:
    timeout: 60
  when: 
    - gitlab_runner_registration_method == "legacy"
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is changed

- name: Verify configuration was updated with authentication token
  shell: docker exec {{ gitlab_runner_container_name }} grep -q "^  token = " /etc/gitlab-runner/config.toml
  register: token_verification
  when: 
    - gitlab_runner_registration_method == "legacy"
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is changed
  failed_when: token_verification.rc != 0

- name: Display successful registration message
  debug:
    msg: "GitLab Runner successfully registered and authentication token was generated"
  when: 
    - gitlab_runner_registration_method == "legacy"
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is changed
    - token_verification.rc == 0

- name: Verify GitLab Runner configuration
  shell: docker exec {{ gitlab_runner_container_name }} gitlab-runner verify
  register: runner_verify
  when: gitlab_runner_registration_method == "legacy"
  failed_when: false

- name: Display runner verification results
  debug:
    var: runner_verify.stdout_lines
  when: 
    - gitlab_runner_registration_method == "legacy"
    - runner_verify is defined

- name: Check if authentication token was generated after legacy registration
  shell: docker exec {{ gitlab_runner_container_name }} cat /etc/gitlab-runner/config.toml | grep -E "^  token = " || echo "Token not found"
  register: token_check
  when: gitlab_runner_registration_method == "legacy"
  failed_when: false

- name: Display authentication token status
  debug:
    msg: "Authentication token status: {{ token_check.stdout }}"
  when: 
    - gitlab_runner_registration_method == "legacy"
    - token_check is defined

- name: Show runner status after legacy registration
  shell: docker exec {{ gitlab_runner_container_name }} gitlab-runner list
  register: runner_status
  when: gitlab_runner_registration_method == "legacy"
  failed_when: false

- name: Display runner status
  debug:
    var: runner_status.stdout_lines
  when: 
    - gitlab_runner_registration_method == "legacy"
    - runner_status is defined