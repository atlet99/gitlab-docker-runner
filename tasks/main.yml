---
- name: Check Docker installation
  command: docker --version
  register: docker_check
  failed_when: docker_check.rc != 0
  changed_when: false

- name: Create runner data directory
  file:
    path: "{{ runner_directory }}"
    state: directory
    owner: root
    group: root
    mode: '0750'

- name: Inspect custom network (if needed)
  command: docker network inspect {{ docker_network }}
  register: network_check
  failed_when: network_check.rc not in [0, 1]
  changed_when: false
  when:
    - not runner_network_per_build
    - docker_network is defined
    - docker_network != ""

- name: Create custom network (if needed)
  command: >
    docker network create --driver bridge {% if docker_network_subnet is defined and docker_network_subnet != "" %} --subnet={{ docker_network_subnet }} {% endif %} {% if docker_network_gateway is defined and docker_network_gateway != "" %} --gateway={{ docker_network_gateway }} {% endif %} {% if docker_network_options is defined and docker_network_options|length > 0 %} {% for key, value in docker_network_options.items() %} --opt {{ key }}={{ value }} {% endfor %} {% endif %} {{ docker_network }}
  when:
    - not runner_network_per_build
    - docker_network is defined
    - docker_network != ""
    - network_check.rc == 1

- name: Validate GitLab URL for legacy registration
  uri:
    url: "{{ gitlab_runner_url }}"
    method: GET
    status_code: [200, 401, 403]
    timeout: 30
  register: gitlab_url_check
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
  failed_when: false

- name: Fail if GitLab URL is not accessible
  fail:
    msg: "GitLab URL {{ gitlab_runner_url }} is not accessible. Please check the URL and network connectivity."
  when:
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - gitlab_url_check.failed

- name: Generate config.toml for modern registration method
  ansible.builtin.template:
    src: config.toml.j2
    dest: "{{ runner_directory }}/config.toml"
    mode: '0600'
  when: 
    - gitlab_runner_registration_token is not defined or gitlab_runner_registration_token == ""



- name: Start GitLab Runner container for modern registration (with host network)
  docker_container:
    name: "{{ gitlab_runner_container_name }}"
    image: "gitlab/gitlab-runner:{{ gitlab_runner_version }}"
    state: started
    restart_policy: always
    recreate: true
    network_mode: host
    volumes:
      - "{{ runner_directory }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env:
      TZ: "{{ tz }}"
  when: 
    - gitlab_runner_registration_token is not defined or gitlab_runner_registration_token == ""
    - docker_use_host_network | bool

- name: Start GitLab Runner container for modern registration (with custom network)
  docker_container:
    name: "{{ gitlab_runner_container_name }}"
    image: "gitlab/gitlab-runner:{{ gitlab_runner_version }}"
    state: started
    restart_policy: always
    recreate: true
    # Pass a list of dictionaries to `networks`.
    # If `runner_network_per_build` is true, pass an empty list => no networks.
    # Otherwise, pass a list with one dict containing the network name (or "bridge" by default).
    networks: "{{ [] if runner_network_per_build else ([{ 'name': docker_network }] if docker_network and docker_network != '' else [{ 'name': 'bridge' }]) }}"
    volumes:
      - "{{ runner_directory }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env:
      TZ: "{{ tz }}"
  when: 
    - gitlab_runner_registration_token is not defined or gitlab_runner_registration_token == ""
    - not docker_use_host_network | bool

- name: Start GitLab Runner container for legacy registration (with host network)
  docker_container:
    name: "{{ gitlab_runner_container_name }}"
    image: "gitlab/gitlab-runner:{{ gitlab_runner_version }}"
    state: started
    restart_policy: always
    recreate: true
    network_mode: host
    volumes:
      - "{{ runner_directory }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env:
      TZ: "{{ tz }}"
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - docker_use_host_network | bool

- name: Start GitLab Runner container for legacy registration (with custom network)
  docker_container:
    name: "{{ gitlab_runner_container_name }}"
    image: "gitlab/gitlab-runner:{{ gitlab_runner_version }}"
    state: started
    restart_policy: always
    recreate: true
    # Pass a list of dictionaries to `networks`.
    # If `runner_network_per_build` is true, pass an empty list => no networks.
    # Otherwise, pass a list with one dict containing the network name (or "bridge" by default).
    networks: "{{ [] if runner_network_per_build else ([{ 'name': docker_network }] if docker_network and docker_network != '' else [{ 'name': 'bridge' }]) }}"
    volumes:
      - "{{ runner_directory }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env:
      TZ: "{{ tz }}"
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - not docker_use_host_network | bool



- name: Wait for GitLab Runner container to be ready
  wait_for:
    timeout: 30
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""

- name: Set legacy registration command with all arguments
  ansible.builtin.set_fact:
    legacy_register_cmd: >
      register
      --non-interactive
      --url "{{ gitlab_runner_url }}"
      --registration-token "{{ gitlab_runner_registration_token }}"
      --name "{{ gitlab_runner_name }}"
      {% if gitlab_runner_tags %}--tag-list "{{ gitlab_runner_tags | join(',') }}"{% endif %}
      {% if gitlab_runner_output_limit and gitlab_runner_output_limit > 0 %}--output-limit "{{ gitlab_runner_output_limit }}"{% endif %}
      {% if gitlab_runner_request_concurrency %}--request-concurrency "{{ gitlab_runner_request_concurrency }}"{% endif %}
      --executor docker
      --docker-image "{{ docker_image }}"
      {% if docker_privileged %}--docker-privileged{% endif %}
      {% if docker_volumes %}{% for volume in docker_volumes %} --docker-volumes "{{ volume }}"{% endfor %}{% endif %}
      {% if docker_shm_size %}--docker-shm-size "{{ docker_shm_size }}"{% endif %}
      {% if docker_pull_policy %}--docker-pull-policy "{{ docker_pull_policy }}"{% endif %}
      {% if docker_helper_image %}--docker-helper-image "{{ docker_helper_image }}"{% endif %}
      {% if docker_allowed_pull_policies %}{% for policy in docker_allowed_pull_policies %} --docker-allowed-pull-policies "{{ policy }}"{% endfor %}{% endif %}
      {% if docker_use_host_network %}--docker-network-mode host{% endif %}
      {% if cache_type %}--cache-type "{{ cache_type }}"{% endif %}
      {% if cache_shared %}--cache-shared{% endif %}
      {% if cache_s3_server_address %}--cache-s3-server-address "{{ cache_s3_server_address }}"{% endif %}
      {% if cache_s3_access_key %}--cache-s3-access-key "{{ cache_s3_access_key }}"{% endif %}
      {% if cache_s3_secret_key %}--cache-s3-secret-key "{{ cache_s3_secret_key }}"{% endif %}
      {% if cache_s3_bucket_name %}--cache-s3-bucket-name "{{ cache_s3_bucket_name }}"{% endif %}
      {% if cache_s3_insecure %}--cache-s3-insecure{% endif %}
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""

- name: Display registration command (without secrets)
  debug:
    msg: "Registration command: gitlab-runner {{ legacy_register_cmd }}"
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_register_cmd is defined

- name: Check if runner already exists before registration
  shell: docker exec {{ gitlab_runner_container_name }} gitlab-runner list 2>/dev/null | grep -q "{{ gitlab_runner_name }}" || echo "not_found"
  register: runner_exists_before_registration
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_register_cmd is defined
  failed_when: false

- name: Unregister existing runner if exists
  command: >
    docker exec {{ gitlab_runner_container_name }} gitlab-runner unregister --name "{{ gitlab_runner_name }}"
  when: 
    - gitlab_runner_registration_method == "legacy"
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_register_cmd is defined
    - runner_exists_before_registration.stdout != "not_found"
  register: unregister_result
  failed_when: false

- name: Wait for container to be ready before registration
  wait_for:
    timeout: 30
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_register_cmd is defined

- name: Check container status before registration
  shell: docker ps --filter "name={{ gitlab_runner_container_name }}" --format "{{.Status}}"
  register: container_status
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_register_cmd is defined
  failed_when: false

- name: Register runner using legacy method
  command: >
    docker exec {{ gitlab_runner_container_name }} gitlab-runner {{ legacy_register_cmd }}
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_register_cmd is defined
    - container_status is defined
    - "'Up' in container_status.stdout"
  register: legacy_registration_result
  failed_when: legacy_registration_result.rc != 0

- name: Backup generated config.toml after registration
  shell: docker exec {{ gitlab_runner_container_name }} cp /etc/gitlab-runner/config.toml /etc/gitlab-runner/config.toml.backup
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
    - legacy_registration_result.rc == 0

- name: Read backup config.toml to extract dynamic data
  shell: docker exec {{ gitlab_runner_container_name }} cat /etc/gitlab-runner/config.toml.backup
  register: backup_config
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
    - legacy_registration_result.rc == 0

- name: Extract runner ID from backup config
  shell: docker exec {{ gitlab_runner_container_name }} grep "id = " /etc/gitlab-runner/config.toml.backup | awk '{print $3}'
  register: extracted_runner_id
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
    - legacy_registration_result.rc == 0
    - backup_config is defined

- name: Extract runner token from backup config
  shell: docker exec {{ gitlab_runner_container_name }} grep "token = " /etc/gitlab-runner/config.toml.backup | head -1 | awk -F'"' '{print $2}'
  register: extracted_runner_token
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
    - legacy_registration_result.rc == 0
    - backup_config is defined

- name: Extract token_obtained_at from backup config
  shell: docker exec {{ gitlab_runner_container_name }} grep "token_obtained_at = " /etc/gitlab-runner/config.toml.backup | awk '{print $3}'
  register: extracted_token_obtained_at
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
    - legacy_registration_result.rc == 0
    - backup_config is defined

- name: Set extracted data as facts
  ansible.builtin.set_fact:
    runner_id: "{{ extracted_runner_id.stdout | trim }}"
    runner_token: "{{ extracted_runner_token.stdout | trim }}"
    token_obtained_at: "{{ extracted_token_obtained_at.stdout | trim }}"
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
    - legacy_registration_result.rc == 0
    - backup_config is defined
    - extracted_runner_id is defined
    - extracted_runner_token is defined
    - extracted_token_obtained_at is defined

- name: Debug extracted data from backup
  debug:
    msg: |
      EXTRACTED DATA FROM BACKUP:
      runner_id: "{{ extracted_runner_id.stdout | trim }}"
      runner_token: "{{ extracted_runner_token.stdout | trim }}"
      token_obtained_at: "{{ extracted_token_obtained_at.stdout | trim }}"
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
    - legacy_registration_result.rc == 0
    - backup_config is defined
    - extracted_runner_id is defined
    - extracted_runner_token is defined
    - extracted_token_obtained_at is defined



- name: Generate final config.toml with dynamic data
  ansible.builtin.template:
    src: config.toml.j2
    dest: "{{ runner_directory }}/config.toml"
    mode: '0600'
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
    - legacy_registration_result.rc == 0
    - backup_config is defined
    - extracted_runner_id is defined
    - extracted_runner_token is defined
    - extracted_token_obtained_at is defined

- name: Restart GitLab Runner container to apply final configuration
  docker_container:
    name: "{{ gitlab_runner_container_name }}"
    state: started
    restart_policy: always
    recreate: true
    network_mode: host
    volumes:
      - "{{ runner_directory }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env:
      TZ: "{{ tz }}"
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
    - legacy_registration_result.rc == 0
    - backup_config is defined
    - extracted_runner_id is defined
    - extracted_runner_token is defined
    - extracted_token_obtained_at is defined



- name: Check if runner is already registered
  shell: docker exec {{ gitlab_runner_container_name }} gitlab-runner list 2>/dev/null | grep -q "{{ gitlab_runner_name }}" || echo "not_found"
  register: runner_exists_check
  when: 
    - gitlab_runner_registration_method == "legacy"
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_register_cmd is defined
  failed_when: false

- name: Display runner existence status
  debug:
    msg: "Runner '{{ gitlab_runner_name }}' exists: {{ runner_exists_check.stdout != 'not_found' }}"
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - runner_exists_check is defined

- name: Wait for registration to complete
  wait_for:
    timeout: 30
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined

- name: Check registration logs for errors
  shell: docker logs {{ gitlab_runner_container_name }} 2>&1 | tail -20
  register: registration_logs
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined

- name: Display registration logs
  debug:
    var: registration_logs.stdout_lines
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - registration_logs is defined

- name: Check registration command output
  debug:
    var: legacy_registration_result.stdout_lines
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined

- name: Check registration command stderr
  debug:
    var: legacy_registration_result.stderr_lines
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined



- name: Wait for GitLab Runner to be ready after registration
  wait_for:
    timeout: 60
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined

- name: Wait for new container to be ready
  wait_for:
    timeout: 30
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined


- name: Display successful registration message
  debug:
    msg: "GitLab Runner successfully registered"
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined

- name: Display registration failure message
  debug:
    msg: |
      GitLab Runner registration appears to have failed.
      Please check:
      1. Registration token validity and expiration
      2. GitLab URL accessibility
      3. Network connectivity
      4. SSL/TLS certificates
      5. GitLab instance status
      
      You can run the diagnostic script: ./scripts/diagnose-legacy-registration.sh
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined

- name: Display registration not attempted message
  debug:
    msg: |
      GitLab Runner registration was not attempted.
      This could be due to:
      1. Missing registration token
      2. Registration token is empty
      
      Please check your variables and try again.
  when: 
    - gitlab_runner_registration_token is not defined or gitlab_runner_registration_token == ""

- name: Verify GitLab Runner configuration
  shell: docker exec {{ gitlab_runner_container_name }} gitlab-runner verify
  register: runner_verify
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
  failed_when: false

- name: Display runner verification results
  debug:
    var: runner_verify.stdout_lines
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
    - runner_verify is defined

- name: Show runner status after legacy registration
  shell: docker exec {{ gitlab_runner_container_name }} gitlab-runner list
  register: runner_status
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
  failed_when: false

- name: Display runner status
  debug:
    var: runner_status.stdout_lines
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
    - runner_status is defined

- name: Display final configuration file content
  shell: docker exec {{ gitlab_runner_container_name }} cat /etc/gitlab-runner/config.toml
  register: final_config_content
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
  failed_when: false

- name: Show final configuration
  debug:
    msg: |
      ========================================
      FINAL GITLAB RUNNER CONFIGURATION
      ========================================
      {{ final_config_content.stdout }}
      ========================================
  when: 
    - gitlab_runner_registration_token is defined
    - gitlab_runner_registration_token != ""
    - legacy_registration_result is defined
    - final_config_content is defined
