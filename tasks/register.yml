# roles/atlet99.gitlab-docker-runner/tasks/register.yml
---
- name: Determine authentication mode
  set_fact:
    _auth_mode: "{{ 'modern' if (gitlab_runner_token | default('') | length) > 0 else 'legacy' }}"
  when: gitlab_runner_unified_logic_enabled | bool

- name: Disable unified logic if requested
  set_fact:
    _auth_mode: "legacy"
  when: not gitlab_runner_unified_logic_enabled | bool

- name: Debug authentication mode determination
  debug:
    msg: |
      Authentication mode determination:
      - gitlab_runner_unified_logic_enabled: {{ gitlab_runner_unified_logic_enabled | default(true) }}
      - gitlab_runner_token length: {{ (gitlab_runner_token | default('')) | length }}
      - gitlab_runner_registration_token length: {{ (gitlab_runner_registration_token | default('')) | length }}
      - _auth_mode: {{ _auth_mode }}

# ---------- LEGACY ----------
- block:
    - name: Debug legacy mode
      debug:
        msg: "Using LEGACY mode with registration_token: {{ gitlab_runner_registration_token }}"

    - name: Check GitLab URL accessibility (legacy)
      uri:
        url: "{{ gitlab_runner_url }}"
        method: GET
        status_code: [200,401,403]
        timeout: "{{ gitlab_runner_api_timeout }}"
      register: gitlab_url_check
      failed_when: false
      when: gitlab_runner_validate_url | bool

    - name: Fail if GitLab URL is not accessible
      fail:
        msg: "GitLab URL {{ gitlab_runner_url }} is not accessible."
      when:
        - gitlab_runner_validate_url | bool
        - gitlab_url_check.failed | default(false)

    - name: Register via API (legacy)
      uri:
        url: "{{ gitlab_runner_url }}/api/v4/runners"
        method: POST
        body_format: json
        body:
          registration_token: "{{ gitlab_runner_registration_token }}"
          description: "{{ gitlab_runner_name }}"
          tag_list: "{{ gitlab_runner_tags | default([]) }}"
          run_untagged: "{{ gitlab_runner_run_untagged }}"
          locked: "{{ gitlab_runner_locked }}"
          access_level: "{{ gitlab_runner_access_level }}"
          maintenance_note: "{{ gitlab_runner_maintenance_note }}"
          maximum_timeout: "{{ gitlab_runner_maximum_timeout }}"
        status_code: 201
        validate_certs: true
        timeout: "{{ gitlab_runner_api_timeout }}"
        headers:
          PRIVATE-TOKEN: "{{ gitlab_runner_personal_access_token | default('') }}"
      register: gl_runner_reg
      failed_when: false
      when: gitlab_runner_api_first_enabled | bool

    - name: Set extracted vars (API ok)
      set_fact:
        extracted_runner_id: "{{ gl_runner_reg.json.id }}"
        extracted_runner_token: "{{ gl_runner_reg.json.token }}"
        extracted_token_obtained_at: "{{ gl_runner_reg.json.token_obtained_at | default('') }}"
      when: gl_runner_reg.status | default(0) == 201

    - name: Debug API registration result
      debug:
        msg: |
          API registration result:
          - gl_runner_reg.status: {{ gl_runner_reg.status | default('NOT SET') }}
          - extracted_runner_token: {{ extracted_runner_token | default('NOT SET') }}

    # ---------- CLI FALLBACK ----------
    - block:
        - name: Debug CLI fallback block
          debug:
            msg: |
              CLI fallback block execution:
              - gitlab_runner_cli_fallback_enabled: {{ gitlab_runner_cli_fallback_enabled | default(true) }}
              - gl_runner_reg.status: {{ gl_runner_reg.status | default('NOT SET') }}
              - Condition: {{ gitlab_runner_cli_fallback_enabled | default(true) }} and ( {{ gl_runner_reg.status | default('NOT SET') }} != 201 )

        - name: Create temp dir on host for tmp config
          file:
            path: "{{ runner_tmp_dir }}"
            state: directory
            mode: "0700"

        - name: Run one-shot container to register (legacy CLI)
          command: >
            docker run --rm -u 0:0
            -v {{ runner_tmp_dir }}:/etc/gitlab-runner
            -e TZ={{ tz }}
            gitlab/gitlab-runner:{{ gitlab_runner_version }}
            register
            --non-interactive
            --config /etc/gitlab-runner/config.toml
            --url {{ gitlab_runner_url }}
            --registration-token {{ gitlab_runner_registration_token }}
            --name {{ gitlab_runner_name }}
            --executor shell
          register: _cli_reg
          failed_when: false

        - name: Debug CLI registration result
          debug:
            msg: |
              CLI registration result:
              rc={{ _cli_reg.rc }}
              stdout:
              {{ _cli_reg.stdout | default('') }}
              stderr:
              {{ _cli_reg.stderr | default('') }}

        - name: Check if temporary config file exists
          stat:
            path: "{{ runner_tmp_dir }}/config.toml"
          register: config_file_stat

        - name: Show tmp config content (debug)
          command: cat {{ runner_tmp_dir }}/config.toml
          register: config_content
          failed_when: false
          when: config_file_stat.stat.exists | default(false)

        - name: Debug config content
          debug:
            msg: |
              ---- config.toml (tmp) ----
              {{ config_content.stdout | default('FILE NOT FOUND') }}
          when: config_file_stat.stat.exists | default(false)

        - name: Fail if CLI didn't produce config
          fail:
            msg: "CLI fallback did not create config.toml"
          when: not config_file_stat.stat.exists | default(false)

        - name: Extract token from temporary config
          command: awk -F'=' '/^[[:space:]]*token[[:space:]]*=/ {gsub(/[" ]/,"",$2);print $2}' {{ runner_tmp_dir }}/config.toml
          register: _parsed_token
          changed_when: false
          failed_when: false

        - name: Extract id from temporary config
          command: awk -F'=' '/^[[:space:]]*id[[:space:]]*=/ {gsub(/[" ]/,"",$2);print $2}' {{ runner_tmp_dir }}/config.toml
          register: _parsed_id
          changed_when: false
          failed_when: false

        - name: Extract token_obtained_at from temporary config
          command: awk -F'=' '/^[[:space:]]*token_obtained_at[[:space:]]*=/ {gsub(/[" ]/,"",$2);print $2}' {{ runner_tmp_dir }}/config.toml
          register: _parsed_obtained
          changed_when: false
          failed_when: false

        - name: Set extracted runner variables (CLI fallback)
          set_fact:
            extracted_runner_token: "{{ _parsed_token.stdout | trim }}"
            extracted_runner_id: "{{ _parsed_id.stdout | trim }}"
            extracted_token_obtained_at: "{{ _parsed_obtained.stdout | trim }}"
          when: (_parsed_token.stdout | default('')) != ""

        - name: Debug extracted variables after CLI fallback
          debug:
            msg: |
              extracted_runner_token: {{ extracted_runner_token | default('NOT SET') }}
              extracted_runner_id: {{ extracted_runner_id | default('NOT SET') }}

        - name: Cleanup tmp dir
          file:
            path: "{{ runner_tmp_dir }}"
            state: absent
          when: gitlab_runner_cleanup_temp_containers | default(true) | bool
      when:
        - gitlab_runner_cli_fallback_enabled | bool
        - extracted_runner_token is not defined
        - gl_runner_reg.status | default(0) != 201
  when: _auth_mode == 'legacy'

- name: Debug legacy block condition
  debug:
    msg: |
      Legacy block condition check:
      - _auth_mode: {{ _auth_mode }}
      - _auth_mode == 'legacy': {{ _auth_mode == 'legacy' }}
      - gitlab_runner_registration_token: "{{ gitlab_runner_registration_token | default('NOT SET') }}"

# ---------- MODERN ----------
- block:
    - name: Debug modern mode
      debug:
        msg: "Using MODERN mode with token: {{ gitlab_runner_token }}"

    - name: Mirror modern token vars
      set_fact:
        extracted_runner_token: "{{ gitlab_runner_token }}"
  when: _auth_mode == 'modern'

- name: Debug modern block condition
  debug:
    msg: |
      Modern block condition check:
      - _auth_mode: {{ _auth_mode }}
      - _auth_mode == 'modern': {{ _auth_mode == 'modern' }}
      - gitlab_runner_token: "{{ gitlab_runner_token | default('NOT SET') }}"

# ---------- VALIDATION ----------
- name: Debug token status
  debug:
    msg: |
      Token status:
      - _auth_mode: {{ _auth_mode }}
      - extracted_runner_token is defined: {{ extracted_runner_token is defined }}
      - extracted_runner_token: "{{ extracted_runner_token | default('NOT SET') }}"
      - gitlab_runner_token: "{{ gitlab_runner_token | default('NOT SET') }}"
      - gitlab_runner_registration_token: "{{ gitlab_runner_registration_token | default('NOT SET') }}"

- name: Check that token was obtained
  fail:
    msg: "Failed to obtain token for runner. Please check registration parameters."
  when: extracted_runner_token is not defined or (extracted_runner_token | length) == 0

# ---------- CONFIG & CONTAINER ----------
- name: Create runner directory
  file:
    path: "{{ runner_directory }}"
    state: directory
    owner: root
    group: root
    mode: "0750"

- name: Render config.toml
  template:
    src: config.toml.j2
    dest: "{{ runner_directory }}/config.toml"
    mode: "0600"

- name: (Re)start GitLab Runner container (with host network)
  community.docker.docker_container:
    name: "{{ gitlab_runner_container_name }}"
    image: "gitlab/gitlab-runner:{{ gitlab_runner_version }}"
    restart_policy: always
    privileged: false
    network_mode: host
    env:
      TZ: "{{ tz }}"
    volumes:
      - "{{ runner_directory }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/cache:/cache"
    state: started
  when: docker_use_host_network | bool

- name: (Re)start GitLab Runner container (with custom/default bridge)
  community.docker.docker_container:
    name: "{{ gitlab_runner_container_name }}"
    image: "gitlab/gitlab-runner:{{ gitlab_runner_version }}"
    restart_policy: always
    privileged: false
    networks: "{{ [] if runner_network_per_build else ([{ 'name': docker_network }] if docker_network|default('') != '' else [{ 'name': 'bridge' }]) }}"
    env:
      TZ: "{{ tz }}"
    volumes:
      - "{{ runner_directory }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/cache:/cache"
    state: started
  when: not docker_use_host_network | bool

# ---------- VERIFY ----------
- name: Wait for container to be ready
  wait_for:
    timeout: 30

- name: Check runner status
  shell: docker exec {{ gitlab_runner_container_name }} gitlab-runner list 2>/dev/null | grep -q "{{ gitlab_runner_name }}" || echo "not_found"
  register: runner_status_check
  failed_when: false
  changed_when: false

- name: Display registration status
  debug:
    msg: "Runner '{{ gitlab_runner_name }}' registered: {{ runner_status_check.stdout != 'not_found' }}"
  when: runner_status_check is defined

- name: Verify runner configuration
  shell: docker exec {{ gitlab_runner_container_name }} gitlab-runner verify
  register: runner_verify
  failed_when: false
  changed_when: false

- name: Display verification results
  debug:
    var: runner_verify.stdout_lines
  when: runner_verify is defined