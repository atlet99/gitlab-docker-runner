- name: Determine authentication mode
  set_fact:
    _auth_mode: "{{ 'modern' if (gitlab_runner_token | default('')) | length > 0 else 'legacy' }}"
  when: gitlab_runner_unified_logic_enabled | bool

- name: Disable unified logic if requested
  set_fact:
    _auth_mode: "legacy"
  when: not gitlab_runner_unified_logic_enabled | bool

- name: Debug authentication mode determination
  debug:
    msg: |
      Authentication mode determination:
      - gitlab_runner_unified_logic_enabled: {{ gitlab_runner_unified_logic_enabled | default('true') }}
      - gitlab_runner_token length: {{ (gitlab_runner_token | default('')) | length }}
      - gitlab_runner_registration_token length: {{ (gitlab_runner_registration_token | default('')) | length }}
      - _auth_mode: {{ _auth_mode }}

# ------------------------------
# LEGACY branch (registration_token)
# ------------------------------
- block:
    - name: Debug legacy mode
      debug:
        msg: "Using LEGACY mode with registration_token: {{ gitlab_runner_registration_token }}"

    - name: Check GitLab URL accessibility for legacy registration
      uri:
        url: "{{ gitlab_runner_url }}"
        method: GET
        status_code: [200, 401, 403]
        timeout: "{{ gitlab_runner_api_timeout }}"
      register: gitlab_url_check
      failed_when: false
      when: gitlab_runner_validate_url | bool

    - name: Fail if GitLab URL is not accessible
      fail:
        msg: "GitLab URL {{ gitlab_runner_url }} is not accessible."
      when:
        - gitlab_runner_validate_url | bool
        - gitlab_url_check.failed

    # ---- API first (minimal body for old GitLab) ----
    - name: Register runner via API (legacy, minimal)
      uri:
        url: "{{ gitlab_runner_url }}/api/v4/runners"
        method: POST
        body_format: json
        body:
          registration_token: "{{ gitlab_runner_registration_token }}"
          description: "{{ gitlab_runner_name }}"
        status_code: 201
        validate_certs: true
        timeout: "{{ gitlab_runner_api_timeout }}"
      register: gl_runner_reg
      failed_when: false
      when: gitlab_runner_api_first_enabled | bool

    - name: Set extracted runner variables (API successful)
      set_fact:
        extracted_runner_id: "{{ gl_runner_reg.json.id }}"
        extracted_runner_token: "{{ gl_runner_reg.json.token }}"
        extracted_token_obtained_at: "{{ gl_runner_reg.json.token_expires_at | default('') }}"
      when: gl_runner_reg is defined and gl_runner_reg.status == 201

    - name: Debug API registration result
      debug:
        msg: |
          API registration result:
          - gl_runner_reg.status: {{ gl_runner_reg.status | default('NOT SET') }}
          - extracted_runner_token: {{ extracted_runner_token | default('NOT SET') }}
      when: gl_runner_reg is defined

    # ---- CLI fallback ----
    - block:
        - name: Debug CLI fallback block
          debug:
            msg: |
              CLI fallback block execution:
              - gitlab_runner_cli_fallback_enabled: {{ gitlab_runner_cli_fallback_enabled | default('true') }}
              - gl_runner_reg.status: {{ gl_runner_reg.status | default('NOT SET') }}

        - name: Create temporary container for CLI registration
          community.docker.docker_container:
            name: "{{ gitlab_runner_container_name }}-temp"
            image: "gitlab/gitlab-runner:{{ gitlab_runner_version }}"
            state: started
            restart_policy: "no"
            volumes:
              - "{{ runner_directory }}:/etc/gitlab-runner"
            env:
              TZ: "{{ tz }}"

        - name: Register runner via CLI (legacy fallback, docker executor)
          community.docker.docker_container_exec:
          	container: "{{ gitlab_runner_container_name }}-temp"
            tty: true
            command: >
              gitlab-runner register
              --non-interactive
              --url {{ gitlab_runner_url }}
              --registration-token {{ gitlab_runner_registration_token }}
              --name {{ gitlab_runner_name }}
              --executor docker
              --docker-image {{ docker_image }}
              --docker-privileged {{ docker_privileged | ternary('true','false') }}
              {% if gitlab_runner_tags | length > 0 %}--tag-list {{ gitlab_runner_tags | join(',') }}{% endif %}
              --run-untagged {{ gitlab_runner_run_untagged | ternary('true','false') }}
              --locked {{ gitlab_runner_locked | ternary('true','false') }}
              --access-level {{ gitlab_runner_access_level }}
              --config /etc/gitlab-runner/config.tmp.toml
          register: _cli_reg
          failed_when: false

        - name: List /etc/gitlab-runner in temp container
          community.docker.docker_container_exec:
            container: "{{ gitlab_runner_container_name }}-temp"
            command: ls -la /etc/gitlab-runner/
          register: _debug_ls
          failed_when: false

        - debug:
            msg: |
              Container filesystem debug:\n{{ _debug_ls.stdout | default('NO OUTPUT') }}

        - name: Show tmp config (inside container)
          community.docker.docker_container_exec:
            container: "{{ gitlab_runner_container_name }}-temp"
            command: cat /etc/gitlab-runner/config.tmp.toml
          register: config_content_in_container
          failed_when: false

        - debug:
            msg: |
              Tmp config content:\n{{ config_content_in_container.stdout | default('NO FILE') }}

        - name: Stat tmp config on host
          stat:
            path: "{{ runner_directory }}/config.tmp.toml"
          register: config_file_stat

        - name: Extract token from tmp config (host)
          command: >
            awk -F'=' '/^[[:space:]]*token[[:space:]]*=/ {gsub(/[" ]/,"",$2);print $2}' {{ runner_directory }}/config.tmp.toml
          register: _parsed_token
          changed_when: false
          failed_when: false
          when: config_file_stat.stat.exists

        - name: Extract id from tmp config (host)
          command: >
            awk -F'=' '/^[[:space:]]*id[[:space:]]*=/ {gsub(/[" ]/,"",$2);print $2}' {{ runner_directory }}/config.tmp.toml
          register: _parsed_id
          changed_when: false
          failed_when: false
          when: config_file_stat.stat.exists

        - debug:
            msg: |
              Token extraction result:
              - _parsed_token.stdout: "{{ _parsed_token.stdout | default('') }}"
              - _parsed_id.stdout: "{{ _parsed_id.stdout | default('') }}"
          when: config_file_stat.stat.exists

        - name: Set extracted runner variables (CLI fallback)
          set_fact:
            extracted_runner_token: "{{ _parsed_token.stdout | trim }}"
            extracted_runner_id: "{{ _parsed_id.stdout | trim }}"
          when:
            - config_file_stat.stat.exists
            - _parsed_token.stdout is defined
            - _parsed_token.stdout | length > 0

        - name: Remove temporary config
          file:
            path: "{{ runner_directory }}/config.tmp.toml"
            state: absent

        - name: Stop and remove temporary container
          community.docker.docker_container:
            name: "{{ gitlab_runner_container_name }}-temp"
            state: absent
          when: gitlab_runner_cleanup_temp_containers | bool

      when:
        - gitlab_runner_cli_fallback_enabled | bool
        - (gl_runner_reg is not defined or gl_runner_reg.status != 201)

  when: _auth_mode == 'legacy'

- name: Debug legacy block condition
  debug:
    msg: |
      Legacy block condition check:
      - _auth_mode: {{ _auth_mode }}
      - gitlab_runner_registration_token: "{{ gitlab_runner_registration_token | default('NOT SET') }}"

# ------------------------------
# MODERN branch (token already issued)
# ------------------------------
- block:
    - name: Debug modern mode
      debug:
        msg: "Using MODERN mode with token: {{ gitlab_runner_token }}"

    - name: Mirror modern token variables to unified names
      set_fact:
        extracted_runner_token: "{{ gitlab_runner_token }}"
  when: _auth_mode == 'modern'

- name: Debug modern block condition
  debug:
    msg: |
      Modern block condition check:
      - _auth_mode: {{ _auth_mode }}
      - gitlab_runner_token: "{{ gitlab_runner_token | default('NOT SET') }}"

# ------------------------------
# Last chance: read from existing config (if any)
# ------------------------------
- block:
    - stat:
        path: "{{ runner_directory }}/config.toml"
      register: _final_cfg

    - slurp:
        src: "{{ runner_directory }}/config.toml"
      register: _final_cfg_b64
      when: _final_cfg.stat.exists

    - set_fact:
        _final_cfg_text: "{{ _final_cfg_b64.content | b64decode }}"
      when: _final_cfg.stat.exists

    - set_fact:
        extracted_runner_token: "{{ extracted_runner_token | default('') or (_final_cfg_text | regex_search('token\\s*=\\s*\"([^\"]+)\"', '\\1')) | default('') }}"
        extracted_runner_id: "{{ extracted_runner_id | default('') or (_final_cfg_text | regex_search('id\\s*=\\s*([0-9]+)', '\\1')) | default('') }}"
      when: _final_cfg.stat.exists
  when: extracted_runner_token is not defined or extracted_runner_token == ""

# Ensure vars exist (avoid undefined)
- set_fact:
    extracted_runner_token: "{{ extracted_runner_token | default('') }}"
    extracted_runner_id: "{{ extracted_runner_id | default('') }}"

# ------------------------------
# Validation
# ------------------------------
- name: Debug token status
  debug:
    msg: |
      Token status:
      - _auth_mode: {{ _auth_mode }}
      - extracted_runner_token: "{{ extracted_runner_token }}"
      - gitlab_runner_token: "{{ gitlab_runner_token | default('NOT SET') }}"
      - gitlab_runner_registration_token: "{{ gitlab_runner_registration_token | default('NOT SET') }}"

- name: Check that token was obtained
  fail:
    msg: "Failed to obtain token for runner. Please check registration parameters."
  when:
    - (_auth_mode == 'modern' and (gitlab_runner_token | length == 0))
    - (_auth_mode == 'legacy' and (extracted_runner_token | length == 0))

# ------------------------------
# Render config.toml
# ------------------------------
- name: Create runner directory
  file:
    path: "{{ runner_directory }}"
    state: directory
    owner: root
    group: root
    mode: '0750'

- name: Render config.toml
  template:
    src: config.toml.j2
    dest: "{{ runner_directory }}/config.toml"
    mode: '0600'

# ------------------------------
# Start/Restart main runner container
# ------------------------------
- name: (Re)start GitLab Runner container (host network)
  community.docker.docker_container:
    name: "{{ gitlab_runner_container_name }}"
    image: "gitlab/gitlab-runner:{{ gitlab_runner_version }}"
    restart_policy: always
    privileged: false
    network_mode: host
    env:
      TZ: "{{ tz }}"
    volumes:
      - "{{ runner_directory }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/cache:/cache"
    state: started
  when: docker_use_host_network | bool

- name: (Re)start GitLab Runner container (bridge/custom network)
  community.docker.docker_container:
    name: "{{ gitlab_runner_container_name }}"
    image: "gitlab/gitlab-runner:{{ gitlab_runner_version }}"
    restart_policy: always
    privileged: false
    networks: "{{ [] if runner_network_per_build else ([{ 'name': docker_network }] if docker_network and docker_network != '' else [{ 'name': 'bridge' }]) }}"
    env:
      TZ: "{{ tz }}"
    volumes:
      - "{{ runner_directory }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/cache:/cache"
    state: started
  when: not docker_use_host_network | bool

# ------------------------------
# Verify
# ------------------------------
- name: Wait for container to be ready
  wait_for:
    timeout: 30

- name: Check runner status
  shell: docker exec {{ gitlab_runner_container_name }} gitlab-runner list 2>/dev/null | grep -q "{{ gitlab_runner_name }}" || echo "not_found"
  register: runner_status_check
  failed_when: false

- name: Display registration status
  debug:
    msg: "Runner '{{ gitlab_runner_name }}' registered: {{ runner_status_check.stdout != 'not_found' }}"
  when: runner_status_check is defined

- name: Verify runner configuration
  shell: docker exec {{ gitlab_runner_container_name }} gitlab-runner verify
  register: runner_verify
  failed_when: false

- name: Display verification results
  debug:
    var: runner_verify.stdout_lines
  when: runner_verify is defined
